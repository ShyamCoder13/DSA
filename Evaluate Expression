
Q-Problem Description
An arithmetic expression is given by a character array A of size N. Evaluate the value of an arithmetic expression in Reverse Polish Notation.

Valid operators are +, -, *, /. Each character may be an integer or an operator.



Problem Constraints
1 <= N <= 105



Input Format
The only argument given is character array A.



Output Format
Return the value of arithmetic expression formed using reverse Polish Notation.



Example Input
Input 1:
    A =   ["2", "1", "+", "3", "*"]
Input 2:
    A = ["4", "13", "5", "/", "+"]


Example Output
Output 1:
    9
Output 2:
    6


Example Explanation
Explaination 1:
    starting from backside:
    * : () * ()
    3 : () * (3)
    + : (() + ()) * (3)
    1 : (() + (1)) * (3)
    2 : ((2) + (1)) * (3)
    ((2) + (1)) * (3) = 9
Explaination 2:
    + : () + ()
    / : () + (() / ())
    5 : () + (() / (5))
    13 : () + ((13) / (5))
    4 : (4) + ((13) / (5))
    (4) + ((13) / (5)) = 6



import java.util.*;
import java.lang.*;
import java.io.*;

/* Name of the class has to be "Main" only if the class is public. */
class Main
{
	public static void main (String[] args) throws java.lang.Exception
	{
		String A[]={"2", "1", "+", "3", "*"};

        //Create a New Stack
        Stack<Integer> st=new Stack<>();

        int n=A.length,a,b;

        for(int i=0;i<n;i++)
        {
            if("*/-+".contains(A[i]))
            {
                //Pop Last 2 Elements
                a=st.pop();
                b=st.pop();

                if(A[i].equals("+"))
                {
                    st.push(b+a);
                }
                else if(A[i].equals("-"))
                {
                    st.push(b-a);
                }
                else if(A[i].equals("/"))
                {
                    st.push(b/a);
                }
                else
                {
                    st.push(b*a);
                }
            }
            else
            {
                 st.push(Integer.parseInt(A[i]));
            }
        }

        System.out.println(st.peek());

	}
}

